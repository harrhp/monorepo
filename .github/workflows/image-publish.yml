name: publish image

on:
  workflow_call:
    inputs:
      name:
        description: image name
        required: true
        type: string
      registry:
        description: registry
        required: true
        type: string
      tagPrefix:
        description: tag prefix to strip
        required: true
        type: string

jobs:
  get-vars:
    if: ${{ startsWith(github.ref, format('refs/tags/{0}/{1}/', github.event.inputs.tagPrefix, github.event.inputs.name)) }}
    runs-on: ubuntu-latest
    env:
      IMAGE_WITHOUT_TAG: ${{ github.event.inputs.registry }}/${{ github.event.inputs.name }}
    outputs:
      imageWithoutTag: ${{ env.IMAGE_WITHOUT_TAG }}
      imageWithTag: ${{ format('{0}:{1}', env.IMAGE_WITHOUT_TAG, github.sha) }}
      imageNewTags: ${{ toJson(fromJson(steps.meta.outputs.json).tags) }}
    steps:
      - name: Docker meta
        id: meta
        env:
          IS_RELEASE_VERSION: ${{ !contains(github.ref, '-') }}
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_WITHOUT_TAG }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}},enable=${{ env.IS_RELEASE_VERSION }}
            type=semver,pattern={{major}},enable=${{ env.IS_RELEASE_VERSION }}
            type=raw,value=latest,enable=${{ env.IS_RELEASE_VERSION }}
          flavor: |
            latest=false

  publish:
    needs: [get-vars]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        imageNewTag: ${{ fromJson(needs.get-vars.outputs.imageNewTags) }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ github.event.inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        run: |
          docker pull ${{ needs.get-vars.outputs.imageWithTag }}
          docker tag ${{ needs.get-vars.outputs.imageWithTag }} ${{ matrix.imageNewTag }}
          docker push ${{ matrix.imageNewTag }}

